{"version":3,"sources":["components/Timer/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","startTime","step","autoplay","useState","time","setTime","isTimerActive","setIsTimerActive","useEffect","timeId","setInterval","clearInterval","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAiCeA,MA9Bf,YAA+C,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAAY,EACpBC,mBAASH,GADW,mBACrCI,EADqC,KAC/BC,EAD+B,OAEFF,qBAASD,GAFP,mBAErCI,EAFqC,KAEtBC,EAFsB,KAoB5C,OAfAC,qBAAU,WACR,IAAIC,EAASC,aAAY,WACV,IAATN,GAAcE,EAEhBD,EAAQD,EAAOH,GAEVK,GAAeC,GAAiB,KAE/B,IAAPN,GAEH,OAAO,WACLU,cAAcF,OAKhB,sBAAKG,UAAU,QAAf,UACE,mBAAGA,UAAU,QAAb,SAAsBR,IACtB,wBAAQS,QAAS,kBAAMN,GAAkBD,IAAzC,SACGA,EAAgB,QAAU,c,MCLpBQ,MAnBf,WAWE,OACE,sBAAKF,UAAU,gBAAf,UACE,cAAC,EAAD,eAZe,CACjBZ,UAAW,GACXC,KAAM,EACNC,UAAU,KAUR,cAAC,EAAD,eARgB,CAClBF,UAAW,GACXC,KAAM,SCCKc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.37c611bc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\n\r\nfunction Timer({ startTime, step, autoplay }) {\r\n  const [time, setTime] = useState(startTime);\r\n  const [isTimerActive, setIsTimerActive] = useState(autoplay ? true : false);\r\n  const timerCounter = () => <p className='timer'>{time}</p>;\r\n\r\n  useEffect(() => {\r\n    let timeId = setInterval(function () {\r\n      if (time !== 0 && isTimerActive) {\r\n        timerCounter();\r\n        setTime(time - step);\r\n      } else {\r\n        if (!isTimerActive) setIsTimerActive(false);\r\n      }\r\n    }, step * 1000);\r\n\r\n    return function cleanup() {\r\n      clearInterval(timeId);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className='timer'>\r\n      <p className='timer'>{time}</p>\r\n      <button onClick={() => setIsTimerActive(!isTimerActive)}>\r\n        {isTimerActive ? 'Pause' : 'Start'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import Timer from './components/Timer/Timer';\nimport './App.css';\n\nfunction App() {\n  const firstTimer = {\n    startTime: 10,\n    step: 1,\n    autoplay: true,\n  };\n  const secondTimer = {\n    startTime: 30,\n    step: 2,\n  };\n\n  return (\n    <div className='timer-wrapper'>\n      <Timer {...firstTimer} />\n      <Timer {...secondTimer} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}